name: voyage

networks:
  # Docker network for the web application
  web-app-network:
    # false means that the network is not external and will be created by Docker Compose
    external: false

volumes:
  pgdata:
  pgadmin-data:

services:
  # Docker configuration for the database
  postgres:
    container_name: voyage-postgres
    image: postgres:16-alpine
    platform: linux/amd64
    restart: always
    env_file:
      - .env
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 5s
      timeout: 5s
      retries: 10
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - ${DB_PORT_OUT}:${DB_PORT}
    networks:
      - web-app-network # Connect the container to the network

  # Docker configuration for pgAdmin
  pgadmin:
    image: dpage/pgadmin4
    platform: linux/amd64
    container_name: voyage-pgadmin
    restart: always
    env_file:
      - .env
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    ports:
      - ${PGADMIN_PORT}:80
    networks:
      - web-app-network # Connect the container to the network

  # Docker configuration for the server
  server:
    build:
      context: .
      dockerfile: Dockerfile
    platform: linux/amd64
    image: adadychanka/voyage
    container_name: voyage-server
    restart: always
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    ports:
      - ${APP_PORT}:${APP_PORT}
    networks:
      - web-app-network # Connect the container to the network

  # Docker configuration for the nginx
  nginx:
    image: nginx:latest
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf # Nginx configuration
    ports:
      - "80:80" # HTTP
      - "443:443" # HTTPS
    depends_on:
      - server # Wait for the server to start
    networks:
        - web-app-network # Connect the container to the network
    # Wait for the DNS to resolve
    command: /bin/sh -c "sleep 5 && nginx -g 'daemon off;'"
